preview_chapter()
??preview_chapter()
library(bookdown)
preview_chapter()
preview_chapter()
bookdown::render_book()
bookdown::render_book()
preview_chapter()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
#summary =
library(rentrez)
i = "SRR11192680  "
get_srr_from_biosample <- function(biosample_id) {
# Step 1: Search BioSample to get UID
bs_search <- entrez_search(db = "biosample", term = biosample_id)
if (length(bs_search$ids) == 0) return(NULL)
# Step 2: Link from biosample UID to SRA UID
link <- entrez_link(dbfrom = "biosample", db = "sra", id = bs_search$ids[1])
if (length(link$links) == 0) return(NULL)
sra_ids <- link$links[[1]]
# Step 3: Fetch RunInfo
runs <- character()
for (sra_id in sra_ids) {
sra_summary <- entrez_fetch(db = "sra", id = sra_id, rettype = "runinfo", retmode = "text")
run_table <- read.csv(text = sra_summary)
runs <- c(runs, run_table$Run)
}
return(runs)
}
i = "SRR11192680"
get_srr_from_biosample <- function(biosample_id) {
# Step 1: Search BioSample to get UID
bs_search <- entrez_search(db = "biosample", term = biosample_id)
if (length(bs_search$ids) == 0) return(NULL)
# Step 2: Link from biosample UID to SRA UID
link <- entrez_link(dbfrom = "biosample", db = "sra", id = bs_search$ids[1])
if (length(link$links) == 0) return(NULL)
sra_ids <- link$links[[1]]
# Step 3: Fetch RunInfo
runs <- character()
for (sra_id in sra_ids) {
sra_summary <- entrez_fetch(db = "sra", id = sra_id, rettype = "runinfo", retmode = "text")
run_table <- read.csv(text = sra_summary)
runs <- c(runs, run_table$Run)
}
return(runs)
}
get_srr_from_biosample(i)
i
#summary =
library(rentrez)
biosample_id="SRR11192680"
# Step 1: Search BioSample to get UID
bs_search <- entrez_search(db = "biosample", term = biosample_id)
bs_search
i="ERR1880809"
biosample_id = i
get_srr_from_biosample <- function(biosample_id) {
# Step 1: Search BioSample to get UID
bs_search <- entrez_search(db = "biosample", term = biosample_id)
if (length(bs_search$ids) == 0) return(NULL)
# Step 2: Link from biosample UID to SRA UID
link <- entrez_link(dbfrom = "biosample", db = "sra", id = bs_search$ids[1])
if (length(link$links) == 0) return(NULL)
sra_ids <- link$links[[1]]
# Step 3: Fetch RunInfo
runs <- character()
for (sra_id in sra_ids) {
sra_summary <- entrez_fetch(db = "sra", id = sra_id, rettype = "runinfo", retmode = "text")
run_table <- read.csv(text = sra_summary)
runs <- c(runs, run_table$Run)
}
return(runs)
}
get_srr_from_biosample(i)
# Step 1: Search BioSample to get UID
bs_search <- entrez_search(db = "biosample", term = biosample_id)
length(bs_search$ids) == 0
#Get urls
get_fastq_urls <- function(accession) {
ena_url <- "https://www.ebi.ac.uk/ena/portal/api/filereport"
res <- GET(
url = ena_url,
query = list(
accession = accession,
result = "read_run",
fields = "fastq_ftp",
format = "tsv"
)
)
df <- read_tsv(content(res, "text", encoding = "UTF-8"), show_col_types = FALSE)
# Check if fastq_ftp exists and is a character
if (nrow(df) == 0 || !"fastq_ftp" %in% names(df) || is.na(df$fastq_ftp) || df$fastq_ftp == "") {
warning(sprintf("No FASTQ found for %s", accession))
return(NULL)
}
# Coerce to character and split
urls <- unlist(strsplit(as.character(df$fastq_ftp), ";"))
urls <- paste0("https://", urls)
return(urls)
}
get_fastq_urls(i)
?/GET
??GET
#Get urls
library(httr)
get_fastq_urls <- function(accession) {
ena_url <- "https://www.ebi.ac.uk/ena/portal/api/filereport"
res <- GET(
url = ena_url,
query = list(
accession = accession,
result = "read_run",
fields = "fastq_ftp",
format = "tsv"
)
)
df <- read_tsv(content(res, "text", encoding = "UTF-8"), show_col_types = FALSE)
# Check if fastq_ftp exists and is a character
if (nrow(df) == 0 || !"fastq_ftp" %in% names(df) || is.na(df$fastq_ftp) || df$fastq_ftp == "") {
warning(sprintf("No FASTQ found for %s", accession))
return(NULL)
}
# Coerce to character and split
urls <- unlist(strsplit(as.character(df$fastq_ftp), ";"))
urls <- paste0("https://", urls)
return(urls)
}
get_fastq_urls(i)
??read_tsv
library(readr)
get_fastq_urls <- function(accession) {
ena_url <- "https://www.ebi.ac.uk/ena/portal/api/filereport"
res <- GET(
url = ena_url,
query = list(
accession = accession,
result = "read_run",
fields = "fastq_ftp",
format = "tsv"
)
)
df <- read_tsv(content(res, "text", encoding = "UTF-8"), show_col_types = FALSE)
# Check if fastq_ftp exists and is a character
if (nrow(df) == 0 || !"fastq_ftp" %in% names(df) || is.na(df$fastq_ftp) || df$fastq_ftp == "") {
warning(sprintf("No FASTQ found for %s", accession))
return(NULL)
}
# Coerce to character and split
urls <- unlist(strsplit(as.character(df$fastq_ftp), ";"))
urls <- paste0("https://", urls)
return(urls)
}
get_fastq_urls(i)
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
df <- read.table(content(res, "text", encoding = "UTF-8"), show_col_types = FALSE)
df <- read.table(content(res, "text", encoding = "UTF-8"))
get_fastq_urls <- function(accession) {
ena_url <- "https://www.ebi.ac.uk/ena/portal/api/filereport"
res <- GET(
url = ena_url,
query = list(
accession = accession,
result = "read_run",
fields = "fastq_ftp",
format = "tsv"
)
)
df <- read.table(content(res, "text", encoding = "UTF-8"))
# Check if fastq_ftp exists and is a character
if (nrow(df) == 0 || !"fastq_ftp" %in% names(df) || is.na(df$fastq_ftp) || df$fastq_ftp == "") {
warning(sprintf("No FASTQ found for %s", accession))
return(NULL)
}
# Coerce to character and split
urls <- unlist(strsplit(as.character(df$fastq_ftp), ";"))
urls <- paste0("https://", urls)
return(urls)
}
get_fastq_urls(i)
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
#### Set up ####
rm(list=ls())
#lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
setwd("/Users/ab61/Documents/Data Analysis/Vibrio2023")
load(file = "Cholera.Rdata")
global[which(global$BAPS1 == "LAT1"),]
global[which(global$BAPS1 == "LAT1"),"ENA_id"]
global[which(global$BAPS1 == "LAT1"),"ENA"]
global[which(global$BAPS1 == "LAT1"),"ENA.ID"]
View(global[which(global$BAPS1 == "LAT1"),])
View(global[which(global$BAPS1 == "BD1"),])
View(global[which(global$BAPS1 == "BD2"),])
View(global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance"),])
View(global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance" & global$VSP_II == "WT"),])
table(global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance" ),"VSP_II "])
View(global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance" ),])
table(global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance" ),"VSP_II"])
sort(table(global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance" ),"VSP_II"]))
global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance"& global$VSP_II ==  ΔVC_0495-VC_0498" ),])
)
global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance"& global$VSP_II ==  "ΔVC_0495-VC_0498" ),])
global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance" & global$VSP_II ==  "ΔVC_0495-VC_0498" ),])
global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance" & global$VSP_II == "ΔVC_0495-VC_0498"),])
global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance" & global$VSP_II == "ΔVC_0495-VC_0498"),]
global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance" & global$VSP_II == "ΔVC_0495-VC_0498"),"EBI.ENA"]
sort(table(global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance" ),"VSP_II"]))
global[which(global$BAPS1 == "BD2" & global$Study != "2014-2018 Surveillance" & global$VSP_II == "VC_0490-interrupted ΔVC_0491-VC_0498"),"EBI.ENA"]
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
getwd()
setwd("~/The Bacterial Genomics Book")
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
data.frame(ID =fastq, fastq1 = paste0(fastq, "_1.fastq.gz", fastq2 = paste0(fastq, "_2.fastq.gz"))
)
fastq =  c("ERR976479", "ERR351174", "ERR576974", "ERR11850183")
data.frame(ID =fastq, fastq1 = paste0(fastq, "_1.fastq.gz", fastq2 = paste0(fastq, "_2.fastq.gz"))
)
data.frame(ID =fastq, fastq1 = paste0(fastq, "_1.fastq.gz"), fastq2 = paste0(fastq, "_2.fastq.gz"))
bookdown::render_book()
library(kable)
install.packages("kable")
bookdown::render_book()
df
write.table(df, quote = F, row.names = F, sep = "\t", file = "df.txt")
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
data.frame(command = "cat", fastq1 = paste0(fastq, "_1.fastq.gz"), fastq2 = paste0(fastq, "_2.fastq.gz"), command2 = ">", id = fastq)
library(httr)
library(readr)
get_fastq_urls <- function(accession) {
res <- GET("https://www.ebi.ac.uk/ena/portal/api/filereport",
query = list(accession = accession, result = "read_run",
fields = "fastq_ftp", format = "tsv"))
df <- read_tsv(content(res, "text", encoding = "UTF-8"), show_col_types = FALSE)
if (nrow(df) == 0 || !"fastq_ftp" %in% names(df) || is.na(df$fastq_ftp) || df$fastq_ftp == "")
return(warning(sprintf("No FASTQ found for %s", accession)))
paste0("https://", unlist(strsplit(as.character(df$fastq_ftp), ";")))}
get_fastq_urls("ERR1880809")
library(knitr)
fastq =  c("ERR976479", "ERR351174", "ERR576974", "ERR11850183")
df = data.frame(ID =fastq, fastq1 = paste0(fastq, "_1.fastq.gz"), fastq2 = paste0(fastq, "_2.fastq.gz"))
kable(df, col.names = NULL)
library(knitr)
fastq =  c("ERR976479", "ERR351174", "ERR576974", "ERR11850183")
df = data.frame(ID =fastq, fastq1 = paste0(fastq, "_1.fastq.gz"), fastq2 = paste0(fastq, "_2.fastq.gz"))
kable(df, col.names = NULL)
library(httr)
library(readr)
get_fastq_urls <- function(accession) {
res <- GET("https://www.ebi.ac.uk/ena/portal/api/filereport",
query = list(accession = accession, result = "read_run",
fields = "fastq_ftp", format = "tsv"))
df <- read_tsv(content(res, "text", encoding = "UTF-8"), show_col_types = FALSE)
if (nrow(df) == 0 || !"fastq_ftp" %in% names(df) || is.na(df$fastq_ftp) || df$fastq_ftp == "")
return(warning(sprintf("No FASTQ found for %s", accession)))
paste0("https://", unlist(strsplit(as.character(df$fastq_ftp), ";")))}
get_fastq_urls("ERR1880809")
library(knitr)
fastq =  c("ERR976479", "ERR351174", "ERR576974", "ERR11850183")
df = data.frame(ID =fastq, fastq1 = paste0(fastq, "_1.fastq.gz"), fastq2 = paste0(fastq, "_2.fastq.gz"))
kable(df, col.names = NULL)
library(knitr)
fastq =  c("ERR976479", "ERR351174", "ERR576974", "ERR11850183")
df = data.frame(ID =fastq, fastq1 = paste0(fastq, "_1.fastq.gz"), fastq2 = paste0(fastq, "_2.fastq.gz"))
kable(df, col.names = NULL)
library(httr)
library(readr)
get_fastq_urls <- function(accession) {
res <- GET("https://www.ebi.ac.uk/ena/portal/api/filereport",
query = list(accession = accession, result = "read_run",
fields = "fastq_ftp", format = "tsv"))
df <- read_tsv(content(res, "text", encoding = "UTF-8"), show_col_types = FALSE)
if (nrow(df) == 0 || !"fastq_ftp" %in% names(df) || is.na(df$fastq_ftp) || df$fastq_ftp == "")
return(warning(sprintf("No FASTQ found for %s", accession)))
paste0("https://", unlist(strsplit(as.character(df$fastq_ftp), ";")))}
get_fastq_urls("ERR1880809")
library(knitr)
fastq =  c("ERR976479", "ERR351174", "ERR576974", "ERR11850183")
df = data.frame(ID =fastq, fastq1 = paste0(fastq, "_1.fastq.gz"), fastq2 = paste0(fastq, "_2.fastq.gz"))
kable(df, col.names = NULL)
library(knitr)
fastq =  c("ERR976479", "ERR351174", "ERR576974", "ERR11850183")
df = data.frame(ID =fastq, fastq1 = paste0(fastq, "_1.fastq.gz"), fastq2 = paste0(fastq, "_2.fastq.gz"))
kable(df, col.names = NULL)
paste(fastq, ".fastq.gz")
paste0(fastq, ".fastq.gz")
library(httr)
library(readr)
get_fastq_urls <- function(accession) {
res <- GET("https://www.ebi.ac.uk/ena/portal/api/filereport",
query = list(accession = accession, result = "read_run",
fields = "fastq_ftp", format = "tsv"))
df <- read_tsv(content(res, "text", encoding = "UTF-8"), show_col_types = FALSE)
if (nrow(df) == 0 || !"fastq_ftp" %in% names(df) || is.na(df$fastq_ftp) || df$fastq_ftp == "")
return(warning(sprintf("No FASTQ found for %s", accession)))
paste0("https://", unlist(strsplit(as.character(df$fastq_ftp), ";")))}
get_fastq_urls("ERR1880809")
library(knitr)
fastq =  c("ERR976479", "ERR351174", "ERR576974", "ERR11850183")
df = data.frame(ID =fastq, fastq1 = paste0(fastq, "_1.fastq.gz"), fastq2 = paste0(fastq, "_2.fastq.gz"))
kable(df, col.names = NULL)
library(knitr)
fastq =  c("ERR976479", "ERR351174", "ERR576974", "ERR11850183")
df = data.frame(ID =fastq, fastq1 = paste0(fastq, "_1.fastq.gz"), fastq2 = paste0(fastq, "_2.fastq.gz"))
kable(df, col.names = NULL)
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
??midpoint.root
bookdown::render_book()
tree=simcoaltree(1990:2010)
plot(tree)
ape::axisPhylo(backward=F)
tree$tip.label
plot(midpoint.root(tree))
plot(phytools:midpoint.root(tree))
library(phytools)
plot(midpoint.root(tree))
tree$tip.label = paste("sample", tree$tip.label, sep = "\n")
library(ape)
library(BactDating)
tree=simcoaltree(1990:2010)
tree$tip.label = paste("sample", tree$tip.label, sep = "\n")
plot(tree)
ape::axisPhylo(backward=F)
plot(tree)
library(ape)
library(BactDating)
tree=simcoaltree(1990:2010)
tree$tip.label = paste("sample", tree$tip.label, sep = "_")
plot(tree)
ape::axisPhylo(backward=F)
plot(tree)
ape::axisPhylo(backward=F)
tree=simobsphy(tree)
tree
plot(tree)
res=bactdate(obsphy,1990:2010)
res=bactdate(tree,1990:2010)
res
plot(res)
data.frame(ID = tree$tip.label)
data.frame(ID = tree$tip.label, date = 1990:2010)
tree$tip.label
data(staph)
plot(staph$tree)
staph$tree$tip.label
staph$dates
data.frame(ID = tree$tip.label, date = 1990:2010)
data.frame(ID = tree$tip.label, date = as.Date(1990:2010))
data.frame(ID = tree$tip.label, date = as.Date(year(1990:2010)))
?as.Date
data.frame(ID = tree$tip.label, date = as.Date(1990:2010, format = c("%Y")))
data.frame(ID = tree$tip.label, date = as.Date(1990:2010, format = c("%YY")))
data.frame(ID = tree$tip.label, date = paste(1990:2010, "-01-01"))
data.frame(ID = tree$tip.label, date = paste0(1990:2010, "-01-01"))
data.frame(ID = tree$tip.label, date = as.Date(paste0(1990:2010, "-01-01")))
library(lubridate)
df = data.frame(ID = tree$tip.label, date = as.Date(paste0(1990:2010, "-01-01")))
df$decimaldate = decimal_date(df$date)
head(df)
sample(c("A", "B", "C"), nrow(metadata))
metadata = data.frame(ID = tree$tip.label, date = as.Date(paste0(1990:2010, "-01-01")))
metadata$decimaldate = decimal_date(df$date)
sample(c("A", "B", "C"), nrow(metadata), replace = T)
bookdown::render_book()
bookdown::render_book()
library(ape)
library(BactDating)
library(lubridate)
tree=simcoaltree(1990:2010)
tree$tip.label = paste("sample", tree$tip.label, sep = "_")
tree=simobsphy(tree)
plot(tree)
metadata = data.frame(ID = tree$tip.label, date = as.Date(paste0(1990:2010, "-01-01")))
metadata$decimaldate = decimal_date(df$date)
decimal_date(df$date)
df$date
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
dates = metadata$dates
names(dates) = metadata$ID
names(dates)
dates
View(metadata)
dates = metadata$decimaldate
dates
names(dates) = metadata$ID
dates
bookdown::render_book()
results =bactdate(tree,dates)
results
plot(results)
plot(results, "trace")
plot(results, "treeRoot")
res=roottotip(tree,dates)
bookdown::render_book()
results$tree
results$rootdate
bookdown::render_book()
plot(results$inputtree)
plot(results$tree)
metadata
plot(results$tree)
bookdown::render_book()
